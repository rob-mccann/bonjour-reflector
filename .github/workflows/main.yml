name: Build and Test
on:
  push:
    branches:
      - master
  pull_request:
  
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - 
        name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      - 
        name: Install pcap
        run: sudo apt-get install -y libpcap-dev
      - 
        name: Check out code
        uses: actions/checkout@v1
      - 
        name: Lint Go Code
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin # temporary fix. See https://github.com/actions/setup-go/issues/14
          go get -u golang.org/x/lint/golint 
          go get github.com/fzipp/gocyclo
          go get honnef.co/go/tools/cmd/staticcheck 
          diff -u <(echo -n) <(gofmt -d .)
          go vet ./...
          staticcheck ./...
          golint -set_exit_status $(go list ./...)
          
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - 
        name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      - 
        name: Install pcap
        run: sudo apt-get install -y libpcap-dev
      - 
        name: Check out code
        uses: actions/checkout@v1
      - 
        name: Run Unit tests.
        run: go test -v -race ./...

  buildx:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      -
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: robmccann/bonjour-reflector # list of Docker images to use as base name for tags
          tag-sha: true # add git short SHA as Docker tag
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: linux/arm64
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}